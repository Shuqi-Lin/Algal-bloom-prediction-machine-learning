round(get_nse_phy(mods,obs),2),
' KGE ',round(get_kge_phy(mods,obs),2),sep=" ")}
print(h)
print(round(get_nse_phy(mods,obs),2))
if (!is.null(var_name)){
name_string = var_name
} else {
name_string = var
}
g1 <- ggplot() +
geom_line(data = modeled, aes(x = as.POSIXct(DateTime), y = Var * 1/mult), col = 'blue') +
geom_point(data = field, aes(x = as.POSIXct(DateTime), y = Var), col = 'red') +
xlab("Datetime") +
ylab(paste0(name_string,' [',var_unit,']')) +
ggtitle(paste0(name_string,' [',var_unit,'], ',var_dep," m: ",h, sep=''))+
theme_bw() +
theme(axis.text=element_text(size=10),axis.title=element_text(size=10))
g1
ggsave(file=paste0('results/',var,'_',var_sim[1],'_',var_dep[1],'.png'), g1, dpi = 300,width = 484,height = 116, units = 'mm')
return(g1)
}
check_calibvalid <- function(obs, var, var_unit, var_seq, var_mult){
for (i in 1:3){
if (i ==1){
time.list <- list("start" = '2005-01-01 12:00:00',
"stop" = '2015-12-30 12:00:00')
optperiod = 'Calibration'
} else if (i == 2){
time.list <- list("start" = '1995-05-09 12:00:00',
"stop" = '2004-12-31 12:00:00')
optperiod = "Validation"
} else if (i == 3){
time.list <- list("start" = '1979-01-02 12:00:00',
"stop" = '2015-12-30 12:00:00')
optperiod = "Total"
}
nml <- read_nml('glm3.nml')
nml <- set_nml(nml, arg_list = time.list)
write_nml(nml, 'glm3.nml')
error <- try(run_glm(os))
print(error)
while (error != 0){
error <- try(run_glm(os))
print(error)
}
if (var == "PHY_TCHLA"){
h <- paste0(optperiod,', RMSE ',
round(get_rmse_phy(temp_mods <- mod2obs_phy(out, obs, reference = 'surface', var),
obs),2) ,var_unit,' NSE ',
round(get_nse_phy(temp_mods <- mod2obs_phy(out, obs, reference = 'surface', var),
obs),2),
'KGE ',round(get_kge_phy(temp_mods <- mod2obs_phy(out, obs, reference = 'surface', var),
obs),2),sep=" ")
} else{
h <- paste0(optperiod,', RMSE ',
round(get_rmse(temp_mods <- mod2obs(out, obs, reference = 'surface', var),
obs),2) * var_mult,var_unit,' NSE ',
round(get_nse(temp_mods <- mod2obs(out, obs, reference = 'surface', var),
obs),2),
' KGE ',round(get_kge(temp_mods <- mod2obs(out, obs, reference = 'surface', var),
obs),2),sep=" ")}
if (var == "PHY_TCHLA"){
print(h)
mod <- mod2obs_phy(out, obs, reference = 'surface', var)
data <- data.frame('time' = mod$DateTime, 'obs' = obs$chla, 'mod' = mod$PHY_TCHLA)
g <- ggplot(data, aes(obs, mod)) +
geom_point() +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
ggtitle(paste0(var,': ',h))
ggsave(file=paste0('results/',optperiod,'_chla.png'), g, dpi = 300,width = 200,height = 200, units = 'mm')
} else{
png(paste0('results/contour_',var,'_',optperiod,'.png'), width = 1600, height = 900)
plot_contour(mod_nc = out, reference = 'surface', h , var, var_unit,var_seq)
dev.off()}
if (var != "PHY_TCHLA"){
g1 <- diag.plots(mod2obs(out, obs, reference = 'surface', var), obs)
ggsave(file=paste0('results/diag_',var,'_',optperiod,'.png'), g1, dpi = 300,width = 384,height = 216, units = 'mm')
}
}
}
# stolen, psssst!
plot_multi_histogram <- function(df, feature, label_column) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)), fill=eval(parse(text=label_column)))) +
geom_histogram(alpha=0.7, position="identity", aes(y = ..density..), color="black") +
geom_density(alpha=0.7) +
#  geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density") +
theme_bw() +
theme(text = element_text(size = 10),
legend.title=element_blank())
plt + guides(fill=guide_legend(title=label_column))}
birgean.work.old<- function(x, bthD, bthA){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
A <- approx(bthD, bthA, dep)$y
birg <- c()
for (ii in 1:length(x$time)){
took <- !is.na(data[,ii])
birg <- append(birg, g/A[1] * trapz(dep[took],A[took] * (1000- data[took,ii]) * dep[took]))
}
return(data.frame('time' = x$time, 'B' = birg))
}
#
#
#   schmidt <- c()
#   for (ii in 1:length(x$time)){
#     took <- !is.na(data[,ii])
#     zv <- 1/500E6 * trapz(dep[took],A[took]* dep[took])
#     schmidt <- append(schmidt, g/A[1] * trapz(dep[took],A[took] *(1000- data[took,ii]) * (zv - dep[took])))
#   }
#   return(data.frame('time' = x$time, 'St' = schmidt))
# }
birgean.work <- function(x, bthD, bthA){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
birg <- c()
for (ii in 1:length(x$time)){
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), x$depth[took])
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
birg <- append(birg, g/A[1] * trapz(dep,A * (1000- inter.data$y) * dep))
}
return(data.frame('time' = x$time, 'B' = birg))
}
birgean.distribution <- function(x, bthD, bthA, doy){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
if (doy != -1){
all.doy <- yday(x$time)
id.doy <- which(all.doy == doy)
} else {id.doy <- c(1:length(x$time))}
birg <- matrix(NA,nrow = length(dep), ncol = length(id.doy))
for (ii in id.doy){
if (ii == id.doy[1]){xi <- 1}
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
#birg <- append(birg, g/A[1] * trapz(dep,A * (1000- inter.data$y) * dep))
birg[,xi] <- g/A[1] * (A * (1000- inter.data$y) * dep)
#g/A[1] * (A[6] * (1000- inter.data$y[6]) * dep[6])
#birg <- append(birg, g/A[1] * trapz(A[took] * (1000- data[took,ii]) * dep[took]))
xi <- xi+1
}
if (doy != -1){
colnames(birg) <- as.character(format(x$time[id.doy], '%Y'))
} else {colnames(birg) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
dbirg <- data.frame(cbind('depths' = dep,birg))
return(dbirg)
}
schmidt.work <- function(x, bthD, bthA){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
#zv <- 1/sum(A)/mean(abs(diff(dep))) * trapz(dep,A* dep)
zv <- 1/479823720 * trapz(dep,A* dep) #  479823720 m3
zv <- dep %*% A / sum(A)
schmidt <- c()
for (ii in 1:length(x$time)){
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
schmidt <- append(schmidt, g/A[1] * trapz(dep,A *(1000- inter.data$y) * (zv - dep)))
}
return(data.frame('time' = x$time, 'St' = schmidt))
}
stability.index <- function(x, bthD, bthA){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
#zv <- 1/sum(A)/mean(abs(diff(dep))) * trapz(dep,A* dep)
zv <- 1/479823720 * trapz(dep,A* dep) #  479823720 m3
zv <- dep %*% A / sum(A)
schmidt <- c()
for (ii in 1:length(x$time)){
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
schmidt <- append(schmidt, sum(inter.data$y * (dep - zv)))
}
return(data.frame('time' = x$time, 'St' = schmidt))
}
schmidt.work.zv <- function(x, bthD, bthA){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
#zv <- 1/sum(A)/mean(abs(diff(dep))) * trapz(dep,A* dep)
zv <- 1/479823720 * trapz(dep,A* dep) #  479823720 m3
schmidt <- c()
for (ii in 1:length(x$time)){
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
schmidt <- append(schmidt, g/A[1] * trapz(dep,A *(1000- inter.data$y) * (zv - dep)))
}
return(data.frame('time' = x$time, 'St' = schmidt))
}
schmidt.distribution <- function(x, bthD, bthA, doy){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
#zv <- 1/sum(A)/mean(abs(diff(dep))) * trapz(dep,A* dep)
zv <- 1/479823720 * trapz(dep,A* dep)
if (doy != -1){
all.doy <- yday(x$time)
id.doy <- which(all.doy == doy)
} else {id.doy <- c(1:length(x$time))}
schmidt <- matrix(NA,nrow = length(dep), ncol = length(id.doy))
for (ii in id.doy){
if (ii == id.doy[1]){xi <- 1}
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
#schmidt <- append(schmidt, g/A[1] * trapz(dep,A *(1000- inter.data$y) * (zv - dep)))
schmidt[,xi] <- g/A[1] * (A * (1000- inter.data$y) * (zv - dep))
#birg <- append(birg, g/A[1] * trapz(A[took] * (1000- data[took,ii]) * dep[took]))
xi <- xi+1
}
if (doy != -1){
colnames(schmidt) <- as.character(format(x$time[id.doy], '%Y'))
} else {colnames(schmidt) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
dschmidt <- data.frame(cbind('depths' = dep,schmidt))
# if (doy != -1){
#   colnames(energy) <- as.character(format(x$time[id.doy], '%Y'))
# } else {colnames(energy) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
# dschmidt <- list('depths' = dep,"time" = x$time,
#                 'schmidt'=schmidt)
return(dschmidt)
}
schmidt.distribution_input <- function(x, bthD, bthA, doy){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
#zv <- 1/sum(A)/mean(abs(diff(dep))) * trapz(dep,A* dep)
zv <- 1/479823720 * trapz(dep,A* dep)
if (doy != -1){
all.doy <- yday(x$time)
id.doy <- which(all.doy == doy)
} else {id.doy <- c(1:length(x$time))}
schmidt <- matrix(NA,nrow = length(dep), ncol = length(id.doy))
for (ii in id.doy){
if (ii == id.doy[1]){xi <- 1}
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
#schmidt <- append(schmidt, g/A[1] * trapz(dep,A *(1000- inter.data$y) * (zv - dep)))
schmidt[,xi] <- g/A[1] * (A * (1000- inter.data$y) * (zv - dep))
#birg <- append(birg, g/A[1] * trapz(A[took] * (1000- data[took,ii]) * dep[took]))
xi <- xi+1
}
# if (doy != -1){
#   colnames(schmidt) <- as.character(format(x$time[id.doy], '%Y'))
# } else {colnames(schmidt) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
# dschmidt <- data.frame(cbind('depths' = dep,schmidt))
# if (doy != -1){
#   colnames(energy) <- as.character(format(x$time[id.doy], '%Y'))
# } else {colnames(energy) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
dschmidt <- list('depths' = dep,"time" = x$time,
'schmidt'=schmidt)
return(dschmidt)
}
energy.distribution <- function(x, temp, bthD, bthA, doy){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
cw = 4186 #J kg-1 degK-1
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
temp =  apply(temp$sim,2,rev)
numD = nrow(data)
if(max(bthD) > dep[numD]){
dep[numD+1] = max(bthD)
}else if(max(bthD) < dep[numD]) {
bthD = c(bthD, dep[numD])
bthA = c(bthA, 0)
}
if(min(bthD) < dep[1]) {
dep = c(min(bthD), dep)
}
A <- stats::approx(bthD, bthA, dep)$y
#zv <- 1/sum(A)/mean(abs(diff(dep))) * trapz(dep,A* dep)
if (doy != -1){
all.doy <- yday(x$time)
id.doy <- which(all.doy == doy)
} else {id.doy <- c(1:length(x$time))}
energy <- matrix(NA,nrow = length(A[-length(A)]), ncol = length(id.doy))
for (ii in id.doy){
if (ii == id.doy[1]){xi <- 1}
took <- !is.na(data[,ii])
if (min(x$depth[took]) > min(dep)){
appr.data <- c(data[took,ii][1], data[took,ii])
appr.temp <- c(temp[took,ii][1], temp[took,ii])
appr.dep <- c(min(dep), rev(x$depth[took]))
}
if (max(x$depth[took]) < max(dep)){
appr.data <- c(appr.data, appr.data[length(appr.data)])
appr.temp <- c(appr.temp, appr.temp[length(appr.temp)])
appr.dep <- c(appr.dep, max(dep))
}
inter.data <- stats::approx(appr.dep, appr.data, dep)
inter.temp <- stats::approx(appr.dep, appr.temp, dep)
#schmidt <- append(schmidt, g/A[1] * trapz(dep,A *(1000- inter.data$y) * (zv - dep)))
energy[,xi] <- 1/A[1] * ( ( (A[-length(A)]*diff(dep)) * inter.data$y[-length(A)] ) * cw * inter.temp$y[-length(A)])
#birg <- append(birg, g/A[1] * trapz(A[took] * (1000- data[took,ii]) * dep[took]))
xi <- xi+1
}
# if (doy != -1){
#   colnames(energy) <- as.character(format(x$time[id.doy], '%Y'))
# } else {colnames(energy) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
denergy <- list('depths' = dep[-length(A)],"time" = x$time,
'energy'=energy)
return(denergy)
}
birgean.distribution.old <- function(x, bthD, bthA, doy){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
A <- approx(bthD, bthA, dep)$y
if (doy != -1){
all.doy <- yday(x$time)
id.doy <- which(all.doy == doy)
} else {id.doy <- c(1:length(x$time))}
birg <- matrix(NA,nrow = length(x$depth), ncol = length(id.doy))
for (ii in id.doy){
if (ii == id.doy[1]){xi <- 1}
took <- !is.na(data[,ii])
birg[took,xi] <- g/A[1] * (A[took] * (1000- data[took,ii]) * dep[took])
g/A[1] * (A[5] * (1000- data[5,ii]) * dep[5])
#birg <- append(birg, g/A[1] * trapz(A[took] * (1000- data[took,ii]) * dep[took]))
xi <- xi+1
}
if (doy != -1){
colnames(birg) <- as.character(format(x$time[id.doy], '%Y'))
} else {colnames(birg) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
dbirg <- data.frame(cbind('depths' = dep,birg))
return(dbirg)
}
schmidt.distribution.old <- function(x, bthD, bthA, doy){
rho = 998.2 # km/m3
g <- 9.81 # m/s2
dep <- rev(x$depth)
data <- apply(x$sim,2,rev)
A <- approx(bthD, bthA, dep)$y
if (doy != -1){
all.doy <- yday(x$time)
id.doy <- which(all.doy == doy)
} else {id.doy <- c(1:length(x$time))}
schmidt <- matrix(NA,nrow = length(x$depth), ncol = length(id.doy))
for (ii in id.doy){
if (ii == id.doy[1]){xi <- 1}
took <- !is.na(data[,ii])
zv <- 1/500E6 * trapz(dep[took],A[took]* dep[took])
schmidt[took,xi] <- g/A[1] * (A[took] * (1000- data[took,ii]) * (zv - dep[took]))
#birg <- append(birg, g/A[1] * trapz(A[took] * (1000- data[took,ii]) * dep[took]))
xi <- xi+1
}
if (doy != -1){
colnames(schmidt) <- as.character(format(x$time[id.doy], '%Y'))
} else {colnames(schmidt) <- as.character(format(x$time[id.doy], '%Y-%m-%d'))}
dschmidt <- data.frame(cbind('depths' = dep,schmidt))
return(dschmidt)
}
# load all functions (big mess)
source('ME_data/functions-glm.R')
# read all packages
library(tidyverse)
library(glmtools)
library(lubridate)
# location of output
out <- 'ME_data//output.nc'
# GLM v3.1
os = 'gfort'
sim_vars(out)
oxy.df <- read_csv('ME_data/field_mendota-timestamp.csv')
oxy.df <-  oxy.df$OXY_oxy * 1000/32
